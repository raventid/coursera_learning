#+TITLE: 230 Kth_smallest_element_in_a_bst

I can just flatten my BST into the vestor (inorder traversal gives me elements in the right order)

#+begin_src c++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> flattened;

    void inorderSearch(TreeNode* root) {
        if (root == nullptr) { return; }

        inorderSearch(root->left);
        flattened.push_back(root->val);
        inorderSearch(root->right);
    }

    int kthSmallest(TreeNode* root, int k) {
        inorderSearch(root);
        return flattened[k - 1];
    }
};
#+end_src

But it's stupid to use additional memory and flattening the tree this way, we can just use counter in recursive function like this

#+begin_src c++
/**
 ,* Definition for a binary tree node.
 ,* struct TreeNode {
 ,*     int val;
 ,*     TreeNode *left;
 ,*     TreeNode *right;
 ,*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 ,*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 ,*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 ,* };
 ,*/
class Solution {
public:
    int result = 0;

    int kthSmallest(TreeNode* root, int k) {
        inorder(root, k);
        return result;
    }

    void inorder(TreeNode* root, int& k) {
        if (!root) { return; }
        inorder(root->left, k);
        k = k - 1;
        if (k == 0){
            result = root->val;
            return;
        }
        inorder(root->right, k);
    }
};
#+end_src
