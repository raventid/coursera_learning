#+TITLE: 17 Letter_combinations_of_a_phone_number

#+begin_src c++
class Solution {
public:
    vector<string> result;
    vector<char> buffer;
    unordered_map<char, vector<char>> dict;

    void iterate(const string& digits, int index) {
        if(index == digits.size()) {
            result.push_back(std::string(buffer.begin(), buffer.end()));
        }

        char digit = digits[index];

        for(char c : dict[digit]) {
            buffer.push_back(c);
            iterate(digits, index + 1);
            buffer.pop_back();
        }
    }

    vector<string> letterCombinations(string digits) {
        if(digits.size() == 0) { return {}; }

        dict = {
            {'2', {'a','b','c'}},
            {'3', {'d','e','f'}},
            {'4', {'g','h','i'}},
            {'5', {'j','k','l'}},
            {'6', {'m','n','o'}},
            {'7', {'p','q','r','s'}},
            {'8', {'t','u','v'}},
            {'9', {'w','x','y','z'}}
        };

        iterate(digits, 0);
        return result;
    }
};
#+end_src
