#+title: 2257 Count Unguarded Cells In The Grid

Link: https://leetcode.com/problems/count-unguarded-cells-in-the-grid/

Just scan from the guard positions, nothign fancy, code is a bit ugly

#+begin_src cpp
class Solution {
public:
    void scan_and_update(vector<vector<int>>& grid, int start_i, int start_j) {
        int i_end = grid.size();
        int j_end = grid[0].size();

        auto guard_or_wall = [&](int i, int j) {
            return grid[i][j] == 1 || grid[i][j] == 2;
        };

        for (int i = start_i + 1; i < i_end; i++) {
            if (guard_or_wall(i, start_j)) {
                break;
            }
            grid[i][start_j] = 3;
        }

        for (int i = start_i - 1; i >= 0; i--) {
            if (guard_or_wall(i, start_j)) {
                break;
            }
            grid[i][start_j] = 3;
        }

        for (int j = start_j + 1; j < j_end; j++) {
            if (guard_or_wall(start_i, j)) {
                break;
            }
            grid[start_i][j] = 3;
        }

        for (int j = start_j - 1; j >= 0; j--) {
            if (guard_or_wall(start_i, j)) {
                break;
            }
            grid[start_i][j] = 3;
        }
    }

    int countUnguarded(int m, int n, vector<vector<int>>& guards,
                       vector<vector<int>>& walls) {
        vector<vector<int>> grid(m, vector<int>(n, 0));

        for (const auto pair : guards) {
            grid[pair[0]][pair[1]] = 1;
        }

        for (const auto pair : walls) {
            grid[pair[0]][pair[1]] = 2;
        }

        for (const auto pair : guards) {
            scan_and_update(grid, pair[0], pair[1]);
        }

        int res = 0;
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {
                if (grid[i][j] == 0) {
                    res++;
                }
            }
        }

        return res;
    }
};
#+end_src
