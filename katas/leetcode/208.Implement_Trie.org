#+TITLE: 208 Implement_trie

We place unordered_map at every level of Trie. Quite simple and practical approach.

#+begin_src c++
class Node {
public:
    unordered_map<char, Node*> children;
    bool terminal;

    Node(){
        terminal = false;
    }
};

class Trie {
public:
    Node* root;

    Trie() {
        root = new Node();
    }

    void insert(string word) {
        Node* cur = root;

        for(const auto c : word) {
            if(!cur->children.contains(c)) {
                cur->children[c] = new Node();
            }

            cur = cur->children[c];
        }

        cur->terminal = true;
    }

    bool search(string word) {
        Node* cur = root;

        for(const auto c : word) {
            if(!cur->children.contains(c)) {
                return false;
            }

            cur = cur->children[c];
        }

        return cur->terminal;
    }

    bool startsWith(string prefix) {
        Node* cur = root;

        for(const auto c : prefix) {
            if(!cur->children.contains(c)) {
                return false;
            }

            cur = cur->children[c];
        }

        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
#+end_src
