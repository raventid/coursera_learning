#+TITLE: 515 Find_largest_value_in_each_tree_row

Simple BFS implementation. Quite a stupid trick has been used to implement the case, where we are reaching the tree level with no nodes. I need to find an elegant way to implement BFS without this dangling level.

NOTE: dead_level is a tree level that does not have values. If you will take a look
at my implementation you will see how I traverse the tree, my problem is that I'm checking for nullptr inside the working loop, so, what is happening there is I can push [nullptr, nullptr, nullptr, nullptr] values to the queue and in this case I'm happening to be outside of the tree body on a virtual tree level

#+begin_src c++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        vector<int> result = {};
        queue<TreeNode*> q;

        q.push(root);

        while(!q.empty()) {
            int size = q.size();
            int level_max = INT_MIN;
            bool dead_level = true;

            for(int i = 0; i < size; i++) {
                auto node = q.front();

                if (node == nullptr) {
                    q.pop();
                    continue;
                }

                dead_level = false;

                if (level_max < node->val) {
                    level_max = node->val;
                }

                q.push(node->left);
                q.push(node->right);

                q.pop();
            }

            if(!dead_level) {
                result.push_back(level_max);
            }
        }

        return result;
    }
};
#+end_src
