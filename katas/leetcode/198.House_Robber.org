#+TITLE: 198 House_robber


#+BEGIN_SRC rust
struct Solution {}

impl Solution {
    pub fn rob(nums: Vec<i32>) -> i32 {
        if nums.len() == 1 { return nums[0] }

        let mut dp = vec![0; nums.len()];
        dp[0] = nums[0];
        dp[1] = nums[1];

        for i in 0..nums.len() {
            if i+2 < nums.len() {
                dp[i+2] = std::cmp::max(dp[i] + nums[i+2], dp[i+2])
            }
            if i+3 < nums.len() {
                dp[i+3] = std::cmp::max(dp[i] + nums[i+3], dp[i+3])
            }
        }

        std::cmp::max(dp[nums.len()-1], dp[nums.len()-2])
    }
}

fn main() {
    {
        let n = vec![1,2,3,1];
        println!("{:?}", Solution::rob(n)); // 4
    }
    {
        let n = vec![2,7,9,3,1];
        println!("{:?}", Solution::rob(n)); // 12
    }
    {
        let n = vec![4,1,2,7,5,3,1];
        println!("{:?}", Solution::rob(n)); // 14
    }
}
#+END_SRC

#+begin_src c++
class Solution {
public:
    unordered_map<int, int> memo;

    int dp(const vector<int>& nums, int index) {
        if(memo.contains(index)) {
            return memo[index];
        }
        if(index >= nums.size()) {
            return 0;
        }

        int one_step = dp(nums, index + 2);
        int two_steps = dp(nums, index + 3);

        memo[index] = std::max(nums[index] + one_step, nums[index] + two_steps);

        return memo[index];
    }

    int rob(vector<int>& nums) {
        return std::max(dp(nums, 0), dp(nums, 1));
    }
};
#+end_src
