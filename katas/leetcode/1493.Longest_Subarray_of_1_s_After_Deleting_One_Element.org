#+TITLE: 1493 Longest_subarray_of_1_s_after_deleting_one_element

#+begin_src rust
struct Solution {}

impl Solution {
    pub fn longest_subarray(nums: Vec<i32>) -> i32 {
        let mut prev = 0;
        let mut curr = 0;
        let mut result = 0;
        let length = nums.len() as i32;

        nums.into_iter().for_each(|num| {
            if num == 1 {
                curr += 1;
            } else {
                prev = curr;
                curr = 0
            }

            result = std::cmp::max(result, prev + curr)
        });

        if result == length {
            result - 1
        } else {
            result
        }
    }
}

fn main() {
    {
        println!("{}", Solution::longest_subarray(vec![1,1,1,0,1,1,1]))
    }
}
#+end_src



#+begin_src elixir
defmodule Solution do
  @spec longest_subarray(nums :: [integer]) :: integer
  def longest_subarray(nums) do
    best = Solution.go(nums, 0, 0, 0)

    if best == length nums do
      best - 1
    else
      best
    end
  end

  def go([], previous_strike, current_strike, best) do
    if previous_strike + current_strike > best do
        previous_strike + current_strike
    else
        best
    end
  end

  def go([0 | nums], previous_strike, current_strike, best) do
    if previous_strike + current_strike > best do
        go(nums, current_strike, 0, previous_strike + current_strike)
    else
        go(nums, current_strike, 0, best)
    end
  end

  def go([1 | nums], previous_strike, current_strike, best) do
    go(nums, previous_strike, current_strike+1, best)
  end
end

IO.inspect Solution.longest_subarray([1,1,1,0,1,1,1])
IO.inspect Solution.longest_subarray([1,1,1])
#+end_src
