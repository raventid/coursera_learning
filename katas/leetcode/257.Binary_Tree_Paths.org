#+title: 257 Binary Tree Paths

Quite a naive solution with a dfs variation.

#+begin_src cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> paths;
    vector<int> current_path;

    string build_path(vector<int>& path) {
        ostringstream oss;

        // set first number (in case of 1 node)
        oss << path[0];

        // append the tail of elements
        for(int i = 1; i < path.size(); i++) {
            oss << "->" << path[i];
        }

        return oss.str();
    }

    void dfs(TreeNode* root) {
        if (!root) { return; }

        current_path.push_back(root->val);
        if (root->left || root->right) {
            dfs(root->left);
            dfs(root->right);
        } else {
            paths.push_back(build_path(current_path));
        }
        current_path.pop_back();
    }

    vector<string> binaryTreePaths(TreeNode* root) {
       dfs(root);
       return paths;
    }
};
#+end_src
