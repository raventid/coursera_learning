#+TITLE: 347 Top_k_frequent_elements

Initial attempt. Simply sorting the vector and returning the result.
IT DOES NOT WORK. because sorted array could look like [1,1,1,1,2,3,3,3]. This algo will give you [1,2] as the answer (if k = 2). But we want to receive [1,3], because this are most frequent elements, not [1,2]

#+begin_src c++
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
      sort(nums.begin(), nums.end());

      current_number = nums[0];
      index = 0;
      while(k != 0 && index < nums.size()) {
        if(current_number != nums[index]) {
          k--;
          current_number = nums[index];
        }

        index++;
      }
    }
};
#+end_src

One interesting solution using combination of priority_queue and map. FIRST WORKING SOLUTION I'VE SUBMITTED. it uses an interesting combination of state capturing, which I don't like very much, but still it's quite useful to have.

#+begin_src c++
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> result;

        // Time: O(n)
        // element => how many times we've seen it
        unordered_map<int, int> mp;
        for (int n : nums) {
            mp[n]++;
        }

        // Time: O(1)
        // comparator function, here we are taking elem_a and elem_b and comparing their frequencies
        auto comp = [&] (int const& a, int const& b) {
            return mp[a] <= mp[b];
        };

        // priority_queue with comparator
        priority_queue<int, vector<int>, decltype(comp)> pq(comp);

        // O(n * log k) < O(n * log n)
        // we are building PQ with a custom comparator
        for (auto [k, _] : mp) {
            pq.push(k);
        }

        // O(k * log k)
        while (k--) {
            result.push_back(pq.top());
            pq.pop();
        }
        return result;
    }
};
#+end_src

The variation of the previous solution, but with a usage of nth_element function.

#+begin_src c++
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        if(k == nums.size()) return nums;

        using MapItem = pair<int, int>;

        unordered_map<int, int> memo;
        for(const auto &i : nums) {
            memo[i]++;
        }

        vector<MapItem> temp(memo.begin(), memo.end());
        nth_element(temp.begin(), temp.begin() + k-1, temp.end(), [](auto &a, auto &b) {
            return a.second > b.second;
        });

        vector<int> result(k);
        for(int i{}; i < k; i++){
            result[i] = temp[i].first;
        }
        return result;
    }
};
#+end_src
