#+TITLE: 35 Search_insert_position

Nothing fancy, just binary search with O(log n).

You should understand why do we use lo to get to the right insert index, when element cannot be found. Maybe we can find counter example where it does not work.

#+begin_src c++
class Solution {
public:
    int bsearch(int key, vector<int>& a) {
        int lo = 0;
        int hi = a.size() - 1;

        while(lo <= hi) {
            int mid = lo + (hi - lo) / 2;

            if(key < a[mid]) {
                hi = mid - 1;
            } else if(key > a[mid]) {
                lo = mid + 1;
            } else {
                return mid;
            }
        }

        return lo;
    }

    int searchInsert(vector<int>& nums, int target) {
        return bsearch(target, nums);
    }
};
#+end_src
