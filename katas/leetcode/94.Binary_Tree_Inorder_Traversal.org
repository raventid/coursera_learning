#+TITLE: 94 Binary_tree_inorder_traversal


#+begin_src rust
// Definition for a binary tree node.
#[derive(Debug, PartialEq, Eq)]
pub struct TreeNode {
    pub val: i32,
    pub left: Option<Rc<RefCell<TreeNode>>>,
    pub right: Option<Rc<RefCell<TreeNode>>>,
}

impl TreeNode {
    #[inline]
    pub fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None
        }
    }
}

struct Solution {}

use std::rc::Rc;
use std::cell::RefCell;

impl Solution {
    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        if root.is_none() { return vec![] }

        let unwrapped = root.expect("checked above");
        let inner = unwrapped.borrow();
        let mut left_vec = Self::inorder_traversal(inner.left.clone());
        let root = inner.val;
        let right_vec = Self::inorder_traversal(inner.right.clone());

        left_vec.push(root);
        left_vec.extend(&right_vec);
        left_vec
    }
}

fn main() {
    {
        let root = TreeNode {
            val: 1,
            left: None,
            right: Some(Rc::new(RefCell::new(TreeNode::new(10))))
        };

        println!("{:?}", Solution::inorder_traversal(Some(Rc::new(RefCell::new(root)))));
    }
}
#+end_src
