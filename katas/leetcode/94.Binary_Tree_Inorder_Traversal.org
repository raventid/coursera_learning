#+TITLE: 94 Binary_tree_inorder_traversal

Notes: [[org:../Education/coursera_learning/katas/leetcode/notes.org][Notes]]
Link: https://leetcode.com/problems/binary-tree-inorder-traversal/

This is a Rust version of the solution. Takes a few ugly movements to get to the point, because you have to do a few clones() + use Rc<RefCell>.

#+begin_src rust

// Definition for a binary tree node.
#[derive(Debug, PartialEq, Eq)]
pub struct TreeNode {
    pub val: i32,
    pub left: Option<Rc<RefCell<TreeNode>>>,
    pub right: Option<Rc<RefCell<TreeNode>>>,
}

impl TreeNode {
    #[inline]
    pub fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None
        }
    }
}

struct Solution {}

use std::rc::Rc;
use std::cell::RefCell;

impl Solution {
    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        if root.is_none() { return vec![] }

        let unwrapped = root.expect("checked above");
        let inner = unwrapped.borrow();
        let mut left_vec = Self::inorder_traversal(inner.left.clone());
        let root = inner.val;
        let right_vec = Self::inorder_traversal(inner.right.clone());

        left_vec.push(root);
        left_vec.extend(&right_vec);
        left_vec
    }
}

fn main() {
    {
        let root = TreeNode {
            val: 1,
            left: None,
            right: Some(Rc::new(RefCell::new(TreeNode::new(10))))
        };

        println!("{:?}", Solution::inorder_traversal(Some(Rc::new(RefCell::new(root)))));
    }
}
#+end_src


A bit ugly Elixir approach. What I do here is I'm concating lists, which is not very efficient and maybe too straighforward, but Rust approach is not much better.

#+begin_src elixir

# Definition for a binary tree node.

defmodule TreeNode do
  @type t :: %__MODULE__{
    val: integer,
    left: TreeNode.t() | nil,
    right: TreeNode.t() | nil
  }
  defstruct val: 0, left: nil, right: nil
end

defmodule Solution do
  def inorder_traversal(nil) do
    []
  end

  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]
  def inorder_traversal(root) do
    Solution.inorder_traversal(root.left) ++ [root.val] ++ Solution.inorder_traversal(root.right)
  end
end

root = %TreeNode{val: 10, right: %TreeNode{val: 12, right: nil, left: nil}, left: nil}
IO.inspect Solution.inorder_traversal(root), charlists: :as_lists

root1 = nil
IO.inspect Solution.inorder_traversal(root1), charlists: :as_lists
#+end_src
