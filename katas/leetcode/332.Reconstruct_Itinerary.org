#+TITLE: 332 Reconstruct_itinerary

#+BEGIN_SRC rust
struct Solution {}

impl Solution {
    pub fn find_itinerary(tickets: Vec<Vec<String>>) -> Vec<Vec<String>> {
        let visited : std::collections::HashSet<String> = std::collections::HashSet::new();
        let mut hashmap = std::collections::HashMap::new();

        tickets.iter().for_each(|pair| {
            let from = pair[0].to_string();
            let to = pair[1].to_string();

            let mut old_value = hashmap.entry(from).or_insert(vec![]);
            old_value.push(to);
        });

        let mut backtracked = Self::backtrack(hashmap.clone(), "JFK".to_string());

        println!("{:?}", backtracked);
        println!("{:?}", hashmap);
        let shortest = backtracked.iter().map(|path| path.len()).min().unwrap();
        backtracked.retain(|path| path.len() == shortest);
        vec![backtracked.first().unwrap().to_vec()]
    }

    fn backtrack(mut hashmap: std::collections::HashMap<String, Vec<String>>, target_airport: String) -> Vec<Vec<String>> {
        if hashmap.get(&target_airport).unwrap().is_empty() { return vec![vec![target_airport]] }

        let mut possible_ways = hashmap.entry(target_airport.clone()).or_insert(vec![]);

        let paths = possible_ways.clone().into_iter().map(|next_airport| {
            let mut cloned_map = hashmap.clone();

            let updated_possible_ways = cloned_map.get_mut(&target_airport).unwrap();
            updated_possible_ways.retain(|airport| *airport != *next_airport);

            Self::backtrack(cloned_map, next_airport.to_string())
                .into_iter()
                .map(|path| {
                    let mut head = vec![target_airport.clone()];
                    head.extend(path.into_iter());
                    head
                })
                .collect::<Vec<Vec<String>>>()
        }).flatten().collect();

        paths
    }
}

fn main() {
    {
        let tickets = vec![
            vec!["JFK".to_string(), "SFO".to_string()],
            vec!["JFK".to_string(), "ATL".to_string()],
            vec!["SFO".to_string(), "ATL".to_string()],
            vec!["ATL".to_string(), "JFK".to_string()],
            vec!["ATL".to_string(), "SFO".to_string()]
        ];

        println!("{:?}", Solution::find_itinerary(tickets));
    }
}

#+END_SRC

#+RESULTS:
#+begin_example
warning: unused variable: `visited`
 --> src/main.rs:6:13
  |
6 |         let visited : std::collections::HashSet<String> = std::collections::HashSet::new();
  |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_visited`
  |
  = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> src/main.rs:13:17
   |
13 |             let mut old_value = hashmap.entry(from).or_insert(vec![]);
   |                 ----^^^^^^^^^
   |                 |
   |                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/main.rs:29:13
   |
29 |         let mut possible_ways = hashmap.entry(target_airport.clone()).or_insert(vec![]);
   |             ----^^^^^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: 3 warnings emitted

warning: unused variable: `visited`
 --> src/main.rs:6:13
  |
6 |         let visited : std::collections::HashSet<String> = std::collections::HashSet::new();
  |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_visited`
  |
  = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> src/main.rs:13:17
   |
13 |             let mut old_value = hashmap.entry(from).or_insert(vec![]);
   |                 ----^^^^^^^^^
   |                 |
   |                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/main.rs:29:13
   |
29 |         let mut possible_ways = hashmap.entry(target_airport.clone()).or_insert(vec![]);
   |             ----^^^^^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: 3 warnings emitted

[["JFK", "SFO", "ATL", "JFK", "ATL", "SFO"], ["JFK", "SFO", "ATL", "SFO"], ["JFK", "ATL", "JFK", "SFO", "ATL", "SFO"], ["JFK", "ATL", "SFO", "ATL", "JFK", "SFO"]]
{"ATL": ["JFK", "SFO"], "SFO": ["ATL"], "JFK": ["SFO", "ATL"]}
[["JFK", "SFO", "ATL", "SFO"]]
#+end_example
