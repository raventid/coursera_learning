#+TITLE: 79 Word_search

# Rust
:PROPERTIES:
:LEVEL: 0
:END:
#+BEGIN_SRC rust
struct Solution {}

impl Solution {
    pub fn exist(board: Vec<Vec<char>>, word: String) -> bool {
        let mut visited = vec![vec![false; board[0].len()]; board.len()];

        for row in 0..board.len() {
            for column in 0..board[0].len() {
                if Self::find_word(&word, &board, row, column, 0, &mut visited) {
                    return true
                }
            }
        }

        false
    }

    fn find_word(word: &str, board: &Vec<Vec<char>>, row: usize, column: usize, letter_index: usize, visited: &mut Vec<Vec<bool>>) -> bool {
        if letter_index == word.len() { return true }

        if let Some(char) = board.get(row).and_then(|row| row.get(column)) {
            if *char != word.chars().nth(letter_index).expect("to be inside bound") || visited[row][column] {
                return false
            }
        } else {
            return false
        }

        visited[row][column] = true;

        let top = Self::find_word(word, board, row+1, column, letter_index+1, visited);
        let bottom = if row == 0 { false } else {
            Self::find_word(word, board, row-1, column, letter_index+1, visited)
        };
        let right = Self::find_word(word, board, row, column+1, letter_index+1, visited);
        let left = if column == 0 { false } else {
            Self::find_word(word, board, row, column-1, letter_index+1, visited)
        };


        visited[row][column] = false;

        return top || bottom || right || left
    }
}

fn main() {
    let board = vec![
        vec!['A','B','C','E'],
        vec!['S','F','C','S'],
        vec!['A','D','E','E']
    ];

    let target = String::from("ABCCED");
    println!("{}", Solution::exist(board.clone(), target));


    let target1 = String::from("ABCB");
    println!("{}", Solution::exist(board, target1))
}
#+END_SRC

In my C++ solutions I mutate the target board instead of using additional visited matrix. So this solution is a bit more memory efficient. Also, in my opinion boarder checks here are implemented in a bit more elegant way.

#+begin_src c++
class Solution {
public:
    bool dfs(vector<vector<char>>& board, const string word, int index, int i, int j, int rows, int columns) {
        if(index == word.size()) {
            return true;
        }

        if(i < 0 || i == rows || j < 0 || j == columns || board[i][j] != word[index]) {
            return false;
        }

        char current_char = board[i][j];
        board[i][j] = '#';

        if(
            dfs(board, word, index + 1, i - 1, j, rows, columns) ||
            dfs(board, word, index + 1, i, j + 1, rows, columns) ||
            dfs(board, word, index + 1, i + 1, j, rows, columns) ||
            dfs(board, word, index + 1, i, j - 1, rows, columns)
        ) {
            board[i][j] = current_char;
            return true;
        }

        board[i][j] = current_char;
        return false;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int rows = board.size();
        int columns = board[0].size();

        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < columns; j++) {
                if(dfs(board, word, 0, i, j, rows, columns)) {
                    return true;
                }
            }
        }

        return false;
    }
};
#+end_src
