#+TITLE: 189 Rotate_array

#+begin_src rust
struct Solution {}

impl Solution {
    pub fn rotate(nums: &mut Vec<i32>, k: i32) {
        let kk = k as usize % nums.len();
        let mut result = Vec::new();
        let split_position = nums.len() - kk;

        for i in split_position..nums.len() {
            result.push(nums[i]);
        }

        for i in 0..split_position {
            result.push(nums[i]);
        }

        ,*nums = result;
    }

    pub fn rotate_in_place(nums: &mut Vec<i32>, k: i32) {
        let kk = k as usize % nums.len();

        Self::reverse_subarray(nums, 0, nums.len());
        Self::reverse_subarray(nums, 0, kk)     ;
        Self::reverse_subarray(nums, kk, nums.len()) ;
    }

    fn reverse_subarray(nums: &mut Vec<i32>, start_position: usize, end_position: usize) {
        let slice = &mut nums[start_position..end_position];
        let rotation_point = slice.len() / 2;

        for i in 0..rotation_point {
          let tmp = slice[i];
          slice[i] = slice[slice.len()-1-i];
          slice[slice.len()-1-i] = tmp;
        }
    }
}

fn main() {
    let mut vec = vec![1,2,3,4,5,6,7];
    let k = 3;
    Solution::rotate(&mut vec, k);
    println!("With O(n) memory {:?}", vec);


    let mut vec1 = vec![1,2,3,4,5,6,7];
    Solution::rotate_in_place(&mut vec1, k);
    println!("With O(n) memory {:?}", vec1);
}
#+end_src

#+RESULTS:
: With O(n) memory [5, 6, 7, 1, 2, 3, 4]
: With O(n) memory [5, 6, 7, 1, 2, 3, 4]
