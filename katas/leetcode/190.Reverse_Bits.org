#+TITLE: 190 Reverse bits

No special twist just grinding the basic algorithm. What we have to do here is to implement the next steps:

- Iterate over number
- Shift ans to the left to allocate last position for the comming bit and move previously assigned bit to the higher order
- Take the last_bit from n
- Move bits to the right in n
- Use simple + operator to add 1 or 0 to the last position in ans (when we repeat our loop we will shift this bit to the left)

The idea here is very similar to the idea of transfering data between stack and queue.

We use 'n' as a stack by poping values from the end and moving cursor toward the beginning.
We use 'ans' as a queue by pushing values to the end and after moving them closer to the front with <<.

#+begin_src c++
class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
       uint32_t ans = 0;

       for(int i = 0; i < 32; i++) {
           ans = ans << 1;

           uint32_t last_bit = n % 2;
           n = n >> 1;

           ans = ans + last_bit;
       }

       return ans;
    }
};
#+end_src
