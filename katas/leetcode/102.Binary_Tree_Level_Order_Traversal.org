#+TITLE: 102 Binary_tree_level_order_traversal

This is just BFS implementation, nothing fancy

#+begin_src c++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        queue<TreeNode*> q;

        if(root == nullptr) { return {}; }

        q.push(root);

        while(!q.empty()) {
            int size = q.size();
            vector<int> level = {};

            for(int i = 0; i < size; i++) {
                auto node = q.front();
                level.push_back(node->val);

                if(node->left != nullptr) {
                    q.push(node->left);
                }

                if(node->right != nullptr) {
                    q.push(node->right);
                }

                q.pop();
            }

            result.push_back(level);
        }

        return result;
    }
};
#+end_src
