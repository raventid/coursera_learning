#+title: Prime Numbers

Prime number generator designed with C++ couroutines (uses quite a primitive brute-force approach) (switch algo to Sieve of Atkin with a limit for couroutine).

(Analyze if switch makes sense in a couroutine-based implementation)

#+begin_src cpp :flags -std=c++20 :results output
#include <iostream>
#include <coroutine>

using namespace std;

// Generator class for generating prime numbers
class PrimeGenerator {
public:
  struct promise_type {
    int current_value;
    auto get_return_object() { return PrimeGenerator{this}; }
    auto initial_suspend() { return suspend_always{}; }
    auto final_suspend() noexcept { return suspend_always{}; }
    void unhandled_exception() { std::terminate(); }
    auto yield_value(int value) {
      current_value = value;
      return suspend_always{};
    }
  };

  PrimeGenerator(promise_type* p) : handle(std::coroutine_handle<promise_type>::from_promise(*p)) {}
  ~PrimeGenerator() { handle.destroy(); }

  auto operator()() {
    handle.resume();
    return handle.promise().current_value;
  }

private:
  std::coroutine_handle<promise_type> handle;
};

// Coroutine function to generate prime numbers
PrimeGenerator generatePrimes() {
  int num = 2;
  while (true) {
    bool isPrime = true;

    for (int i = 2; i * i <= num; ++i) {
      if (num % i == 0) {
        isPrime = false;
        break;
      }
    }

    if (isPrime) {
      co_yield num;
    }

    ++num;
  }
}

int main() {
  PrimeGenerator primes = generatePrimes();

  // Generate and print the first 20 prime numbers
  for (int i = 0; i < 20; ++i) {
    cout << primes() << " ";
  }
  cout << endl;

  return 0;
}
#+end_src

#+RESULTS:
: 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71
