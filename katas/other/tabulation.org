#+TITLE: Cansum

Tabulation approach for different types of dynamic programming problems

#+begin_src rust
fn cansum(target: usize, nums: Vec<usize>) -> bool {
    let mut table = vec![false; target+1];
    table[0] = true;

    for i in 0..table.len() {
        if table[i] {
            nums.iter().for_each(|num| {
                if i+num <= target {
                    table[i+num] = true
                }
            })
        }
    }

    table[target]
}

fn main() {
    println!("{}", cansum(7, vec![2,3])); // true
    println!("{}", cansum(7, vec![5,3,4,7])); // true
    println!("{}", cansum(7, vec![2,4])); // false
    println!("{}", cansum(8, vec![2,3,5])); // true
    println!("{}", cansum(300, vec![7,14])); // false
}
#+end_src


#+begin_src rust
fn howsum(target: usize, nums: Vec<usize>) -> Vec<usize> {
    let mut table = vec![None; target+1];
    table[0] = Some(vec![]);

    for i in 0..=target { // m iterations in this loop
        if let Some(inner) = table[i].clone() {
            nums.iter().for_each(|num| { // n iterations in this loop
                if i + num <= target {
                    let mut new_path = inner.clone(); // problem - I'm also cloning array here in a linear fasion
                    new_path.push(*num);
                    table[i+num] = Some(new_path)
                }
            })
        }
    }

    table[target].clone().unwrap_or(vec![])
}

fn main() {
    println!("{:?}", howsum(7, vec![2,3])); // [3,2,2]
    println!("{:?}", howsum(7, vec![5,3,4,7])); // [4,3]
    println!("{:?}", howsum(7, vec![2,4])); // []
    println!("{:?}", howsum(8, vec![2,3,5])); // [2,2,2,2]
    println!("{:?}", howsum(300, vec![7,14])); // []
}
#+end_src

#+begin_src rust
fn bestsum(target: usize, nums: Vec<usize>) -> Vec<usize> {
    let mut table = vec![None; target+1];
    table[0] = Some(vec![]);

    for i in 0..=target { // m iterations in this loop
        if let Some(inner) = table[i].clone() {
            nums.iter().for_each(|num| { // n iterations in this loop
                if i + num <= target {
                    let mut new_combination = inner.clone(); // problem - I'm also cloning array here in a linear fasion
                    new_combination.push(*num);

                    if let Some(current_combination) = table[i+num].clone() {
                        if new_combination.len() < current_combination.len() {
                            table[i+num] = Some(new_combination)
                        }
                    } else {
                        table[i+num] = Some(new_combination)
                    }
                }
            })
        }
    }

    table[target].clone().unwrap_or(vec![])
}

fn main() {
    println!("{:?}", bestsum(7, vec![2,3])); // [2,2,3]
    println!("{:?}", bestsum(7, vec![5,3,4,7])); // [7]
    println!("{:?}", bestsum(7, vec![2,4])); // []
    println!("{:?}", bestsum(8, vec![2,3,5])); // [3,5]
    println!("{:?}", bestsum(300, vec![7,14])); // []
}
#+end_src
