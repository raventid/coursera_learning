// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM inpu
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // Instruction
	      // i  x  x  a  c  c  c  c  c  c  d  d  d  j  j  j
	      //15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00

	      // Key
	      // i = 0, A instruction
	      // i = 1, C instruction
	      // x, not used
	      // a = 1: use inM, a = 0: use A register
	      // c bits correspond to the control bits of the ALU
	      // d = destination bits that control A register, D register, and M registers, respectively
        // j = jump directives


        // Decode instruction, i
        // Command instruction is 1, so instructionTypeA is 1 for A instruction
	      Not(in=instruction[15], out=instructionTypeA);

        // Select data input into A
	      Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn);

        // if instruction_type A OR d[5]==1, load A register
	      Or(a=instructionTypeA, b=instruction[5], out=aLoad);

	      ARegister(in=aIn, load=aLoad, out=aOut, out[0..14]=addressM);


	      // Compute instruction execution handling

        // if a = 1 and i = 1, use inM, else use aOut
	      And(a=instruction[15], b=instruction[12], out=aOutSel);
	      Mux16(a=aOut, b=inM, sel=aOutSel, out=aOutMUXinM);

	      // D register load if C instruction and C destination bit = 1
	      And(a=instruction[4], b=instruction[15], out=dLoad);
	      DRegister(in=aluOut, load=dLoad, out=dOut);

	      ALU(x=dOut,
            y=aOutMUXinM,
            zx=instruction[11],
            nx=instruction[10],
            zy=instruction[9],
            ny=instruction[8],
            f=instruction[7],
            no=instruction[6],
            out=aluOut,
            out=outM,
            zr=aluZero,
            ng=aluNg);

        // Only set writeM = 1 when specified in a C instruction
	      And(a=instruction[15], b=instruction[3], out=writeM);


	      // Program Counter logic
	      // jjj = 000, no jump

        // if j1 = 1 and aluNg = 1, alu output is negative, jump
	      And(a=instruction[2], b=aluNg, out=j1);
        // if j2 = 1 and aluZero = 1, alu output is zero, jump
	      And(a=instruction[1], b=aluZero, out=j2);

        // Test if alu out is positive
	      Or(a=aluNg, b=aluZero, out=ngORzero);
	      Not(in=ngORzero, out=ngORzeroNOT);

	      // Only jump on C instruction test
	      And(a=instruction[15], b=instruction[0], out=j3C);

        // if j3 = 1 and alu output is positive, jump
	      And(a=j3C, b=ngORzeroNOT, out=j3);

	      Or(a=j1, b=j2, out=j1ORj2);
	      Or(a=j1ORj2, b=j3, out=jOr);

        // Only jump if C instruction
	      And(a=instruction[15], b=jOr, out=jOrC);
        PC(in=aOut, load=jOrC, inc=true, reset=reset, out[0..14]=pc);
}
