module Worksheet where

bindExp :: Integer -> String
bindExp x = let y = 5 in
              "the integer was: " ++ show x
              ++ " and y was: " ++ show y

--bindExp1 :: Integer -> String
-- bindExp1 x = let y = 5 in  
--              let z = y + x in -- ++ "the integer was: "
--              ++ show x ++ " and y was: "
--              ++ show y ++ " and z was: " ++ show z


-- addOneIfOdd n = case odd n of
--   True -> f n
--   False -> n
--   where f n = n + 1

addOneIfOdd = \n -> case odd n of
  True -> f n
  False -> n
  where f n = n + 1

-- addFive x y = (if x > y then y else x) + 5

addFive = \x -> \y -> (if x > y then y else x) + 5 -- Haskell tells that this is Integer -> Integer -> Integer, why not Num a => a -> a -> a

-- mflip f = \x -> \y -> f y x

mflip = \f -> \x -> \y -> f y x
