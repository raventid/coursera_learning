module Main where

import Data.Monoid
import Test.QuickCheck

monoidAssoc :: (Eq m, Monoid m) => m -> m -> m -> Bool
monoidAssoc a b c = (a <> (b <> c)) == ((a <> b) <> c)

-- We can run this in REPL and verify that monoid works! Awesome!
-- quickCheck (monoidAssoc :: String -> String -> String -> Bool)
-- verboseCheck instead of quickCheck will show every data generated by arbitrary

monoidLeftIdentity :: (Eq m, Monoid m) => m -> Bool
monoidLeftIdentity a = (mempty <> a) == a

monoidRightIdentity :: (Eq m, Monoid m) => m -> Bool
monoidRightIdentity a = (a <> mempty) == a

-- Let's run tests against our Bull type
data Bull =
    Fools
  | Twoo
  deriving (Eq, Show)

instance Arbitrary Bull where
  arbitrary = frequency [ (1, return Fools)
                       , (1, return Twoo) ]

instance Monoid Bull where
  mempty = Fools
  mappend _ _ = Fools

type BullMappend = Bull -> Bull -> Bull -> Bool

runBullTests :: IO ()
runBullTests = do
  let ma = monoidAssoc
      mli = monoidLeftIdentity
      mlr = monoidRightIdentity
  quickCheck (ma :: BullMappend)
  quickCheck (mli :: Bull -> Bool)
  quickCheck (mlr :: Bull -> Bool)


-- Copied Optional to this file from exercises of this chapter.
data Optional a =
    Nada
  | Only a
  deriving (Eq, Show)

instance Monoid a => Monoid(Optional a) where
  mempty = Nada

  -- mappend
  mappend (Only x) (Only y) = Only (mappend x y)
  mappend (Only x) _ = Only (mappend x mempty)
  mappend _ (Only y) = Only (mappend mempty y)
  mappend Nada Nada = mempty

-- Crap, had to write Arbitrary for my own Optional. I'm suffering :)
genOnly :: Arbitrary a => Gen (Optional a)
genOnly = do
  x <- arbitrary
  return $ Only x

instance Arbitrary a => Arbitrary (Optional a) where
  arbitrary =
    frequency [ (1, genOnly)
              , (1, return Nada) ]


-- Exercise Maybe Another Monoid
-- I modified signature and made a ad-hoc polymorphic and not fully, I want this garanty.
newtype First' a =
  First' { getFirst' :: Optional a }
  deriving (Eq, Show)

instance (Monoid a) => Monoid (First' a) where
  mempty =  First' { getFirst' = Nada }
  mappend (First' { getFirst' =  x }) (First' { getFirst' = y }) = First' { getFirst' = mappend x y }

firstMappend :: (Monoid a) => First' a -> First' a -> First' a
firstMappend = mappend

-- It might seem weird that it works, but as far as I understand it does it like this. It looks that I'm using FirstMappend in quickCheck
-- and it sees that I'm generating correct arbitrary data for it, so GHC allow me to write this, despite original type
-- requires Optional wrapper.
type FirstMappend =
     First' String
  -> First' String
  -> First' String
  -> Bool

type FstId = First' String -> Bool

genFirst :: Arbitrary a => Gen (First' a)
genFirst = do
  x <- arbitrary
  return First' { getFirst' = x }

instance Arbitrary a => Arbitrary (First' a) where
  arbitrary = genFirst

runMaybeAnotherMonoidTest :: IO ()
runMaybeAnotherMonoidTest = do
  quickCheck (monoidAssoc :: FirstMappend)
  quickCheck (monoidLeftIdentity :: FstId)
  quickCheck (monoidRightIdentity :: FstId)

main :: IO ()
main = putStrLn "You've hitted main stub. Write your code in main."
