#+TITLE: Dynamic_traits

This is an experimentation insipred by this article https://habr.com/ru/post/432202/

#+BEGIN_SRC rust
fn main() {
    let v: &String = &"hello".into();
    let disp: &dyn std::fmt::Display = v;
    println!("Pointer to string: {}", std::mem::size_of_val(&v));
    println!("Fat pointer to trait object: {}", std::mem::size_of_val(&disp));
}
#+END_SRC

#+RESULTS:
: Pointer to string: 8
: Fat pointer to trait object: 16

#+BEGIN_SRC rust
#![allow(dead_code)]

trait Object {
    fn type_name(&self) -> &str;
    fn as_string(&self) -> &String;
}

// To adapt the string to the trait object `Object`
// this `Object` declares what is the type of this object.
fn annotate<'a>(input: &'a String, type_name: &str) -> &'a dyn Object {
    let b = Box::new(Wrapper {
        value: input,
        type_name: type_name.into(),
    });
    Box::leak(b)
}

struct Wrapper<'a> {
    value: &'a String,
    type_name: String,
}

impl<'a> Object for Wrapper<'a> {
    fn type_name(&self) -> &str {
        &self.type_name
    }

    fn as_string(&self) -> &String {
        self.value
    }
}

fn main () {
}

mod tests {
    #[test]
    fn test() {
        let input: String = "hello".into();
        let annotated1 = annotate(&input, "Widget");
        let annotated2 = annotate(&input, "Gadget");

        assert_eq!("Widget", annotated1.type_name());
        assert_eq!("Gadget", annotated2.type_name());

        let unwrapped1 = annotated1.as_string();
        let unwrapped2 = annotated2.as_string();

        // It's still the same String
        assert_eq!(unwrapped1 as *const String, &input as *const String);
        assert_eq!(unwrapped2 as *const String, &input as *const String);
    }
}
#+END_SRC

#+RESULTS:
