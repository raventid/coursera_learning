#+TITLE: Arc


Atomic reference counter.

#+begin_src rust
struct ArcData<T> {
    ref_count: AtomicUsize,
    data: T,
}
#+end_src

We cannot Box<Arc<T>>, box implies unique ownership

#+begin_src rust
use std::ptr::NonNull;

pub struct Arc<T> {
    // NonNull pointer could help in Option optimization.
    // Option<Arc<T>> will be the same size as an Arc<T>,
    // using the null pointer representation for None.
    ptr: NonNull<ArcData<T>>,
}

unsafe impl<T: Send + Sync> Send for Arc<T> {}
unsafe impl<T: Send + Sync> Sync for Arc<T> {}

impl<T> Arc<T> {
    pub fn new(data: T) -> Arc<T> {
        Arc {
            ptr: NonNull::from(Box::leak(Box::new(ArcData {
                ref_count: AtomicUsize::new(1),
                data,
            }))),
        }
    }

    fn data(&self) -> &ArcData<T> {
        unsafe { self.ptr.as_ref() }
    }
}

impl<T> Deref for Arc<T> {
    type Target = T;

    fn deref(&self) -> &T {
        &self.data().data
    }
}

impl<T> Clone for Arc<T> {
    fn clone(&self) -> Self {
        // TODO: Handle overflows.
        self.data().ref_count.fetch_add(1, Relaxed);
        Arc {
            ptr: self.ptr,
        }
    }
}
#+end_src

#+RESULTS:
: error: Could not compile `cargonuSpzm`.
